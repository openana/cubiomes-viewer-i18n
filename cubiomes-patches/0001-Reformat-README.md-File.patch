From cc9906785939321594b3d12f1f864e2ab7e94303 Mon Sep 17 00:00:00 2001
From: The jR3f <97492766+jR3f@users.noreply.github.com>
Date: Mon, 20 Dec 2021 18:34:40 +0800
Subject: [PATCH] Reformat README.md File


diff --git a/README.md b/README.md
index 69e5242..4ab7a05 100644
--- a/README.md
+++ b/README.md
@@ -3,22 +3,18 @@
 Cubiomes is a standalone library, written in C, that mimics the biome and feature generation of Minecraft Java Edition.
 It is intended as a powerful tool to devise very fast, custom seed finding applications and large scale map viewers with minimal memory usage.
 
-
 #### Cubiomes-Viewer
 
 If you want to get started without coding there is now also a [graphical application](https://github.com/Cubitect/cubiomes-viewer) based on this library.
 
-
 #### Audience
 
 You should be familiar with the C programming language, also a basic understanding of the Minecraft biome generation process would be helpful.
 
-
 ## Getting Started
 
 This section is meant to give you a quick starting point with small example programs if you want to use this library to find your own biome dependent features.
 
-
 ### Biome Generator
 
 Let's create a simple program called `find_biome_at.c` which tests seeds for a Mushroom Fields biome at a predefined location.
@@ -59,18 +55,23 @@ int main()
 ```
 
 You can compile this code either by directly adding a target to the makefile, or you can compile and link to a cubiomes archive:
+
 ```
 $ cd cubiomes
 $ make libcubiomes
 ```
+
 To compile, and link the cubiomes library you can use one of
+
 ```
 $ gcc find_biome_at.c libcubiomes.a -fwrapv -lm   # static
 $ gcc find_biome_at.c -L. -lcubiomes -fwrapv -lm  # dynamic
 ```
+
 Both commands assume that your source code is saved as `find_biome_at.c` in the cubiomes working directory. If your makefile is configured to use pthreads you also may need to add the `-lpthread` option to the compiler.
 The option `-fwrapv` enforces two's complement for signed integer overflow, which this library relies on. It is not strictly necessary for this example as the library should already be compiled with this flag, but it is good practice to prevent undefined behaviour.
 Running the program should output:
+
 ```
 $ ./a.out
 Seed 262 has a Mushroom Fields biome at block position (0, 0).
@@ -133,14 +134,12 @@ int main()
 }
 ```
 
-
 ### Structure Generation
 
 The generation of structures can usually be regarded as a two stage process: generation attempts and biome checks. For most structures, Minecraft divides the world into a grid of regions (usually 32x32 chunks) and performs one generation attempt in each. We can use `getStructurePos()` to get the position of such a generation attempt and then test whether a structure will actually generate there with `isViableStructurePos()`, however, this is more expensive to compute (many Âµsec rather than nsec).
 
 Note: some structures (in particular desert pyramids, jungle temples and woodland mansions) in 1.18 no longer depend solely on the biomes and can also fail to generate based on the surface height near the generation attempt. Unfortunately, cubiomes does not provide block level world generation and cannot check for this, and may therefore yield false positive positions. Support for an approximation for the surface height might be added in the future to improve accuracy.
 
-
 ```C
 // find a seed with a certain structure at the origin chunk
 #include "finders.h"
@@ -190,7 +189,6 @@ A commonly desired feature are Quad-Witch-Huts or similar multi-structure cluste
 
 The function `searchAll48()` can be used to find a complete set of 48-bit seed bases for a custom criterion. Given that in general it can take a very long time to check all 2^48 seeds (days or weeks), the function provides some functionality to save the results to disk which can be loaded again using `loadSavedSeeds()`. Luckly, in some cases it is possible to reduce the search space even further. For Swamp Huts and structures with a similar structure configuration there are only a handfull of constellations where the structures are close enough together to run simultaneously. Conveniently, these constellations differ uniquely at the lower 20 bits. (This is hard to prove, or at least I haven't found a riggerous proof that doesn't rely on brute forcing.) By specifying a list of lower 20-bit values we can reduce the search space to the order of 2^28, which can be checked in a reasonable amount of time.
 
-
 ```C
 // find seeds with a quad-witch-hut about the origin
 #include "finders.h"
@@ -269,7 +267,6 @@ int main()
 
 Strongholds as well as the world spawn point actually search until they find a suitable location, rather than checking a single spot like most other structures. This causes them to be particularly performance expensive to find. Furthermore, the positions of stongholds have to be generated in a certain order, which can be done in an iterator fashion with `initFirstStronghold()` and `nextStronghold()`. For the world spawn, the generation starts with a search for a suitable biome near the origin, but will continue until a grass or podzol block is found. There is no reliable way of checking actual blocks, which means the search relies on a statistic, matching grass presence to biomes. Alternatively, we can simply use `estimateSpawn()` and terminate the search after the first biome check and assume that grass is near by.
 
-
 ```C
 // find spawn and the first N strongholds
 #include "finders.h"
@@ -306,8 +303,3 @@ int main()
     return 0;
 }
 ```
-
-
-
-
-
-- 
2.34.1

